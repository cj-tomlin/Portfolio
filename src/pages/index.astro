---
import Layout from "@/layouts/Layout.astro";
import Navigation from "@/components/Navigation.astro";
import Badge from "@/components/starwind/badge";
import Link from "@/components/Link.astro";
const pageTitle = "Chris Tomlin Portfio";
---

<Layout pageTitle={pageTitle}>
	<span slot="nav">
		<!--
  			Example: To override the default navigation links, uncomment below and customize the links.
  			When children are provided, the default links inside Navigation.astro will be replaced.
		-->
		<!-- <Navigation>
			<a href="/" class="font-semibold uppercase btn">Home</a>
			<a href="/about" class="font-semibold uppercase btn">About</a>
			<a href="/contact" class="font-semibold uppercase btn">Contact</a>
		</Navigation> -->
		<Navigation />
	</span>

	<div
		class="flex flex-col md:flex-row md:divide-x-[2px] md:divide-[var(--border)] md:dark:divide-[var(--border)] gap-4 md:gap-0 p-6"
	>
		<div class="overflow-auto p-4 w-full h-full md:w-1/4">
			<h2 class="mb-4 text-lg font-bold uppercase">About</h2>
			<p>
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Nobis,
				atque. Eum beatae quidem eaque? Quaerat, facilis, eaque quia
				maiores totam, vitae numquam aperiam debitis at veniam unde nisi
				modi ipsum!
			</p>
			<h3 class="mt-4 mb-2 font-bold uppercase text-md">Technologies</h3>
			<div class="flex flex-wrap gap-2 mb-4">
				<Badge variant="info">Astro</Badge>
				<Badge variant="primary">Tailwind CSS</Badge>
				<Badge variant="secondary">JavaScript</Badge>
				<Badge variant="success">TypeScript</Badge>
				<Badge variant="warning">Node.js</Badge>
			</div>
		</div>
		<div class="overflow-auto p-4 w-full h-full md:w-1/4">
			<h2 class="mb-4 text-lg font-bold uppercase">Projects</h2>
			<div
				id="project-list"
				class="flex flex-col divide-y-[2px] divide-[var(--border)] dark:divide-[var(--border)] border-t-[2px] border-b-[2px] border-[var(--border)] dark:border-[var(--border)]"
			>
				<div
					class="p-2 cursor-pointer flex justify-between items-center transition-all duration-500 ease-in-out ml-2 text-[var(--primary)]"
					data-project="portfolio"
				>
					<span class="font-bold uppercase">Portfolio Website</span>
					<span class="text-xs uppercase">Web Dev</span>
				</div>
				<div
					class="flex justify-between items-center p-2 transition-all duration-500 ease-in-out cursor-pointer"
					data-project="ecommerce"
				>
					<span class="font-bold uppercase">E-commerce Platform</span>
					<span class="text-xs uppercase">E-commerce</span>
				</div>
				<div
					class="flex justify-between items-center p-2 transition-all duration-500 ease-in-out cursor-pointer"
					data-project="blog"
				>
					<span class="font-bold uppercase">Blog Engine</span>
					<span class="text-xs uppercase">Content</span>
				</div>
			</div>
		</div>
		<div class="p-4 w-full md:w-1/2">
			<div class="flex justify-between items-center mb-4">
				<h2 class="text-lg font-bold uppercase">Project Details</h2>
				<div class="flex gap-4">
					<Link id="info-toggle" type="button" class="uppercase">
						<span slot="text">Info</span>
					</Link>
					<Link
						id="github-link"
						href="#"
						target="_blank"
						class="uppercase"
					>
						<span slot="text">GitHubâ†—</span>
					</Link>
				</div>
			</div>
			<div id="project-details" class="overflow-auto h-full">
				<p>Select a project to see details here.</p>
			</div>
		</div>
	</div>
	<script>
		const projectData = {
			portfolio: {
				title: "Portfolio Website",
				description:
					"A personal portfolio showcasing projects, skills, and contact information. Built with Astro and Tailwind CSS.",
				github: "https://github.com/yourusername/portfolio",
				images: [
					"https://placehold.co/600x400?text=Portfolio+1",
					"https://placehold.co/600x400?text=Portfolio+2",
				],
			},
			ecommerce: {
				title: "E-commerce Platform",
				description:
					"A full-featured e-commerce platform with product listings, shopping cart, and checkout functionality.",
				github: "https://github.com/yourusername/ecommerce",
				images: [
					"https://placehold.co/600x400?text=E-commerce+1",
					"https://placehold.co/600x400?text=E-commerce+2",
				],
			},
			blog: {
				title: "Blog Engine",
				description:
					"A static blog engine supporting markdown posts, categories, and tags.",
				github: "https://github.com/yourusername/blog",
				images: [
					"https://placehold.co/600x400?text=Blog+1",
					"https://placehold.co/600x400?text=Blog+2",
				],
			},
		};

		document.addEventListener("DOMContentLoaded", () => {
			const list = document.getElementById("project-list");
			const details = document.getElementById("project-details");
			const infoToggle = document.getElementById("info-toggle");
			const githubLink = document.getElementById(
				"github-link",
			) as HTMLAnchorElement | null;

			if (!list || !details || !infoToggle || !githubLink) return;

			let currentProjectKey: keyof typeof projectData | null = null;
			let showingInfo = false;

			list.addEventListener("click", (e) => {
				const target = (e.target as HTMLElement | null)?.closest(
					"[data-project]",
				);
				if (!target) return;

				const projectKey = target.getAttribute("data-project") as
					| keyof typeof projectData
					| null;
				if (projectKey && projectData[projectKey]) {
					currentProjectKey = projectKey;
					showingInfo = false;

					const project = projectData[projectKey];

					// Update GitHub link
					githubLink.href = project.github;

					// Remove highlight color and indent from all items
					list.querySelectorAll("[data-project]").forEach((el) => {
						(el as HTMLElement).classList.remove(
							"ml-2",
							"text-[var(--primary)]",
						);
					});
					// Highlight the selected item with primary color and indent
					target.classList.add("ml-2", "text-[var(--primary)]");

					// Show images by default
					details.innerHTML = project.images
						.map(
							(src: string) =>
								`<img src="${src}" alt="${project.title}" class="mb-2 w-full rounded border border-[var(--border)] dark:border-[var(--border)]">`,
						)
						.join("");
				}
			});

			infoToggle.addEventListener("click", () => {
				if (!currentProjectKey) return;
				const project = projectData[currentProjectKey];
				showingInfo = !showingInfo;

				if (showingInfo) {
					details.innerHTML = `
						<h3 class="mb-2 font-bold text-md">${project.title}</h3>
						<p>${project.description}</p>
					`;
				} else {
					details.innerHTML = project.images
						.map(
							(src: string) =>
								`<img src="${src}" alt="${project.title}" class="mb-2 w-full rounded border border-[var(--border)] dark:border-[var(--border)]">`,
						)
						.join("");
				}
			});
			// Simulate click on first project to initialize details and highlight
			const firstProject = list.querySelector(
				'[data-project="portfolio"]',
			) as HTMLElement | null;
			if (firstProject) {
				firstProject.click();
			}
		});
	</script>
</Layout>
